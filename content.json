{"meta":{"title":"seven","subtitle":"有趣","description":null,"author":"MagginZ","url":"http://yoursite.com"},"pages":[],"posts":[{"title":"Ionic 应用样式API二","slug":"20171122","date":"2017-11-22T13:04:33.000Z","updated":"2017-11-22T13:13:11.520Z","comments":true,"path":"2017/11/22/20171122/","link":"","permalink":"http://yoursite.com/2017/11/22/20171122/","excerpt":"","text":"今天有以下内容 1. ion-refresher 2. ion-infintie-scroll 3. ion-tabs 4. navigation (跳转、传参) 5. form * ion-list * ion-item * ion-label * ion-input * ion-toggle * ion-checkbox * ion-radio * ion-select * ion-toggle * ion-range 6. lifecycle 7. ionScroll 参考文档 [ionic] (https://ionicframework.com/docs/api/) — refresher 下拉刷新 指定一个对应的组件标签 在ion-content的第一个子元素12345678&lt;ion-refresher&gt; &lt;ion-refresher-content pullingText=\"下拉文本\" pullingIcon=\"下拉图标\" refreshingText=\"正在获取数据文本\" refreshingSpinner=\"正在刷新图标\"&gt; &lt;/ion-refresher-content&gt;&lt;/ion-refresher&gt; 指定下拉刷新要执行的操作 123&lt;ion-refresher(ionRefresh)=\"doRefresh()\"&gt;&lt;/ion-refresher&gt; 结束掉刷新动作 第一步：在触发ionRefresh时间的处理函数，指定$event作为参数,doRefresh($event) 第二步：调用complete方法123doRefresh(refresh)&#123; refresher.complete();&#125; 上拉加载更多 调用1234567&lt;ion-infinite-scroll&gt; &lt;ion-infinite-scroll-content loadingText=\"正在加载更多\" loadingSpinner=\"dots\"&gt; &lt;/ion-infinite-scroll-content&gt;&lt;/ion-infinite-scroll&gt; 绑定事件 12&lt;ion-infinite-scroll (ionInfinite)=\"doInfinite($event)\"&gt;&lt;/ion-infinite-scorll&gt; 结束加载更多动作 1234567doInfinite(infinite)&#123; setTimeout(()=&gt;&#123; //在列表的尾部push一条随机数 this.list.push(Math.floor(Math.random()*1000)); infinite.complete();//结束加载动作 &#125;,1000) &#125; — Tabs tabs在ionic中 主要是用来实现底部的导航效果 实现步骤 指定一个容器 1demo14-tabs 创建两个page 12demo15-first-tabdemo16-second-tab 指定tabs，可以点击不同的tab，加载不同的页面 123456&lt;ion-tabs&gt; &lt;ion-tab tabIcon=\"图标\" tabTitle=\"标题\"&gt;&lt;/ion-tab&gt; &lt;ion-tab&gt;&lt;/ion-tab&gt; &lt;ion-tab&gt;&lt;/ion-tab&gt; …&lt;/ion-tabs&gt; — Form ion-list ion-item ion-label ion-input ion-toggle ion-checkbox ion-radio ion-select ion-toggle ion-rangeIonic在实现表单的时候，不需要form本身这个标签，是通过list实现的123456&lt;ion-list&gt; &lt;ion-item&gt; //添加各种标签 &lt;ion-checkbox&gt;/&lt;ion-label&gt;/&lt;ion-radio&gt;/&lt;ion-toggle&gt;/&lt;ion-range&gt;/&lt;ion-input&gt;/&lt;ion-select&gt;/&lt;ion-option&gt;..&lt;/ion-item&gt;&lt;/ion-list&gt; — Navigation ionic中page之间的跳转，是有一个完善的机制，是通过入栈出栈的方式控制前进和后退 如何来进行跳转 js方式去跳转： 12345678* 引入 import &#123;NavController&#125; from 'ionic-angular'* 实例化constructor(public navCtrl:NavController)&#123;&#125;* 跳转： a. import&#123;DestinationPage&#125; from '**' b.this.navCtrl.push(Demo19EndPage); 通过属性跳转 import {DestinantionPage} from ‘路径’ 在组件类中定义一个变量并进行赋值12345 myDestination:any; constructor(public navCtrl: NavController, public navParams: NavParams) &#123; //给自定义变量进行赋值 this.myDestination=Demo19EndPage;&#125; 直接通过属性绑定，将myDestionation绑定给navPush 12345678910111213141516171819202122 [navPush]=\"myDestination\"``` ### 参数传递1. 明确发送、接收方2. 配置接收方的路由地址(可以选)3. 接收参数4. 发送参数**实现方式：**1. 跳转的同时，发送参数 * js传参方式： ``` bashthis.navCtrl.push( DestinationPage,&#123; key:value&#125;) 通过属性方式：1&lt;button [navPush]=\"myDestination\"] [navParams]=\"&#123;key:value&#125;\" &lt;/button&gt; 接收参数 第一步： 12import &#123;NavParams&#125; from 'ionic-angular' constructor(public navParams:NavParams)&#123;&#125; 第二步： 12this.navParams.data.key;简：this.navParams.get(\"key\") — 生命周期 lifeCycle ionViewDidLoad ionViewCanEnter ionViewCanLeave ionViewWillEnter5.ionViewDidEnter ionViewWillLeave ionViewDidLeave ionViewWillUnLoad 用法直接添加函数方法即可 ionScroll滚动区域，允许横向或者纵向滚动123456&lt;ion-scroll style=\"height:200px;white-space:nowrap\" scrollX=\"true\"&gt; &lt;any style=\"display:inline-block\"&gt;&lt;/any&gt;&lt;/ion-scroll&gt;","categories":[],"tags":[]},{"title":"Ionic 应用样式一","slug":"20171121","date":"2017-11-21T14:23:48.000Z","updated":"2017-11-21T15:01:12.427Z","comments":true,"path":"2017/11/21/20171121/","link":"","permalink":"http://yoursite.com/2017/11/21/20171121/","excerpt":"","text":"Ionic样式比较多，先来这几个 AlertController Butto Card FAB Grid List Slides loadingController ModalController AlertController需要三步：123456789101112131415①引入import &#123;AlertController&#125; from 'ionic-angular'②实例化constructor(public myAlertCtrl:AlertController)&#123;&#125;③调用let myWIndow = this.myAlertCtrl.create(&#123; title:\"\", message:'', handler:function()&#123;&#125;, role:'cancel'//只要取消，就会调用方法&#125;);myWIndwow.present(); Button 1&lt;button ion-button color=\"\"&gt;&lt;/button&gt;&lt;!--color=\"primary/danger/secondart/lingt/dark\"--&gt; 1.自定义常用颜色src/theme/variables.scss $colors 进行设置123$colors:( myPink:pink;) 2.ion-button其他常用属性 2.1:只显示边框的按钮 /outline 2.2:只显示文本 /clear 2.3:圆角效果 /round 2.4：图标按钮 123&lt;button ion-button color=\"light\" icon-left&gt; &lt;ion-icon name=\"home\"&gt;&lt;/ion-icon&gt;&lt;/button&gt; 图标官网(http://ionicframework.com/docs/ionicons/index.html) &lt;i&gt;图标颜色可使用color属性自定义颜色，也可以设置style:&quot;color:颜色&quot;&lt;/i&gt; 2.5:图标大小 1234&lt;button ion-button small&gt;small&lt;/button&gt; &lt;button ion-button&gt;默认&lt;/button&gt; &lt;button ion-button large &gt;large&lt;/button&gt; &lt;button ion-button block&gt;block&lt;/button&gt; &lt;img src=&quot;/img/btnsize.png&quot;/&gt; Card用法： 123ion-card ion-card-header ion-card-content 出现的是卡片的样子，类似于名片？？差不多吧，可以将图片放在header中间，content里面写内容 &lt;img src=&quot;/img/card.png&quot;/&gt; FAB 悬浮式按钮123456789101112131415&lt;ion-content padding&gt;&lt;ion-fab side=\"right\"&gt; &lt;button ion-fab icon-noly &gt; &lt;ion-icon name=\"leaf\"&gt;&lt;/ion-icon&gt; &lt;/button&gt; &lt;ion-fab-list &gt; &lt;button ion-fab&gt;&lt;ion-icon name=\"logo-facebook\"&gt;&lt;/ion-icon&gt;&lt;/button&gt; &lt;button ion-fab&gt; &lt;ion-icon name=\"logo-twitter\"&gt;&lt;/ion-icon&gt;&lt;/button&gt; &lt;button ion-fab&gt;&lt;ion-icon name=\"logo-vimeo\"&gt;&lt;/ion-icon&gt;&lt;/button&gt; &lt;button ion-fab&gt;&lt;ion-icon name=\"logo-github\"&gt;&lt;/ion-icon&gt;&lt;/button&gt; &lt;/ion-fab-list&gt;&lt;/ion-fab&gt;&lt;/ion-content&gt;&lt;!--side属性取值:\"left/right/bottom/top/middle\"--&gt; 注意：side属性设置在最外层ion-fab上，控制整体按钮的方向，side属性设置在ion-fab-list上，控制悬浮按钮的方向 Gridgrid的基本用法：指定一个容器为ion-grid行是通过ion-row去指定列是通过ion-col去指定1.可添加多列，类似bootstrap，多列之间不指定列等分，按照均等分实现排列。指定列的等分使用 col- 或col--,指定列宽为整体宽度的x/122.距离左边列的偏移量offset-3.纵向对齐方式align-itens-satrt/center/end -一行的所有列align-self-start/center/end -当前这一列自己4.横向justify-content-start/center/end5.设置距离边界的距离push- 向右移动pull- 向左移动### List3种，分别是图标列表，联系人头像列表，缩略图列表高级用法：滑动列表基本用法 12ion-list ion-item //(ion-item 是支持列表项内部的对齐，可以通过item-start/end进行左右对齐) 分组列表用法 123ion-item-group ion-item-divider //指定分隔符内容 ion-item //具体的内容 图标列表 123ion-list ion-item ion-icon 联系人列表 12ion-list ion-list 效果如分组列表 常见的列表一 —– avatar list 1234ion-list ion-item ion-avatar &lt;img/&gt; 常见的列表一 —– thumbnail list 1234ion-list ion-item ion-thumbnailr &lt;img/&gt; 高级列表一 —– 侧滑动列表(qq联系人滑动效果) 12345678910111213141516171819202122&lt;ion-list&gt; &lt;ion-item-sliding&gt; &lt;ion-item&gt; &lt;ion-icon name=\"star\"&gt;&lt;/ion-icon&gt; &lt;/ion-item&gt; &lt;!--side是指选项按钮显示在item的左边或右边--&gt; &lt;ion-item-options side=\"right\"&gt; &lt;button ion-button color=\"secondary\"&gt;关注&lt;/button&gt; &lt;button ion-button color=\"gander\"&gt;删除&lt;/button&gt; &lt;/ion-item-options&gt; &lt;/ion-item-sliding&gt;&lt;/ion-list&gt;``` ### Slides 做轮播图效果/可做新手教程 &lt;h3&gt;语法&lt;/h3&gt;``` bashion-slides ion-slide ion-slide ion-slides所支持属性：effect : 轮播样式 slide (默认),fade,cube,coverflow or flipspeed 动画时长autoplay 自动轮播，可指定切换时间direction 纵向/横向轮播 默认horizontal 横向，vertical纵向/ loop 循环pager 小圆点paginationType: bullets（默认）,fraction （/）,progress（可视化进度条） LoadingController实现步骤 12345678910111、引入 import &#123;LoadingController&#125; from 'ionic-angular'2、实例化 constructor(public myLoadCtrl:LoadingController)&#123;&#125;3、调用 let myLoading = this.myLoadCtrl.create(&#123; content:'', duration:'' &#125;) myLoading.present(); myLoading.dismiss(); ModalController 自定义模态窗实现步骤 12345678910111213141516171819201.引入import&#123;ModalController&#125; from 'ionic-angular'2.实例化constructor(public myModalCtrl:ModalController)&#123;&#125;3.创建3.1:创建一个组件 在组件中可以关闭一个模态窗呢？ import &#123;ViewController&#125; from 'ionic-angular' constructor(public myViewCtrl:ViewController)&#123;&#125; //myViewCtrl指的就是模态窗 this.myViewCtrl.dismiss()3.2：声明组件 分别在declarations和entryComponents进行声明3.3：引入对应的组件类，比如LoginComponent3.4:创建模态窗let modal=this.myModal.create(LoginComponent); 3.5:显示模态窗 modal.present();","categories":[],"tags":[]},{"title":"关于Ionic的一些东西","slug":"20171120","date":"2017-11-20T10:38:45.000Z","updated":"2017-11-20T14:39:27.429Z","comments":true,"path":"2017/11/20/20171120/","link":"","permalink":"http://yoursite.com/2017/11/20/20171120/","excerpt":"","text":"啊今天学习了Ionic，想记下来手册参考 Ionic 1.搭建开发环境①安装ionic (有可能会用到的cordova)1npm install -g cordova ionic ②创建一个模板项目 1ionic start myApp tabs/sideMenu/blank 创建一个使用tabs模板/侧边栏菜单模板/空白的模板项目 1ionic start myApp sideMenu 创建一个基于侧边栏菜单的模板项目，项目的名称叫做myApp ③进入到开发模式 //进入到当前目录下的myApp文件夹 1cd myApp //启动开发服务器 1ionic serve 2.Ionic启动开发服务器执行流程1ionic serve Ionic中 主要是在src的pages目录 通过创建page来构造app ①Ionic是基于模块的，在app中有main.ts，指定了启动的根模块为AppModule②在AppModule中 ，发现指定的根组件是由ionic-angular所提供的IonicApp③在app.module.ts中IonicModule.forRoot(MyApp)通过IonicApp和myApp就建立起联系了，可以认为IonicApp就是以myApp为根组件④在app.component.ts中 指定了模板内容为app.html在app.html中 将HelloIonicPage设置为当前的root 3.Ionic中page创建、使用的基本步骤①创建一个page1ionic g page demo01 创建一个叫做demo01的页面类，最终会在src的pages目录中生成一个demo01的文件夹，在该文件夹中有对应的类和模板 ②声明1234567import &#123;Demo01Page&#125; from '../pages/demo01/demo01'@NgModule(&#123; delclarations:[Demo01Page], entryComponents:[Demo01Page]&#125;) ③调用选择1：可以选择去通过导航 访问（现在还没有学） 选择2：将Demo01Page ，引入到app.component.ts,设置为rootPage","categories":[],"tags":[{"name":"/","slug":"","permalink":"http://yoursite.com/tags//"}]},{"title":"Hello World","slug":"hello-world","date":"2017-11-19T07:04:44.942Z","updated":"2017-11-19T07:04:44.942Z","comments":true,"path":"2017/11/19/hello-world/","link":"","permalink":"http://yoursite.com/2017/11/19/hello-world/","excerpt":"","text":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new \"My New Post\" More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment","categories":[],"tags":[]}]}