{"meta":{"title":"seven","subtitle":"有趣","description":null,"author":"MagginZ","url":"http://yoursite.com"},"pages":[],"posts":[{"title":"20171128","slug":"20171128","date":"2017-11-28T13:39:48.000Z","updated":"2017-11-28T14:32:22.091Z","comments":true,"path":"2017/11/28/20171128/","link":"","permalink":"http://yoursite.com/2017/11/28/20171128/","excerpt":"","text":"主要内容 概述 搭建开发环境 React的核心思想和核心概念 React的组件的基础知识react中文文档react官网 一、概述React是是由facebook推出的,一个是通过组件化，用来实现ui层的开源的js库 Why？ 大量的数据操作，带来了大量的DOM操作,浏览器遇到了性能瓶颈问题-&gt;虚拟DOM(VDOM) 大量的数据操作背后，复杂的业务逻辑，代码的维护和开发成本提高-&gt;state和组件化 React特点 组件化 高效（通过虚拟DOM，最大限度的减少真实DOM的操作） JSX：不是一种新的语言，是对于js的扩展，允许在js中编写html 灵活 可以非常方便的搭配其他库来使用 二、React开发环境的搭建方式方式一引入相应的js文件方式二:通过命令行 安装create-react-app1npm install -g create-react-app 创建一个my-app的项目 1create-react-app my-app 切换到对应的目录 1cd my-app/ 启动开发服务器 1npm start 使用React时的问题 React是一个相对年轻的框架，配套使用的库并不是特别多 并不是所有的项目 都适合React来实现（数据操作非常频繁，页面更新非常多） React不支持ie8以下的任何浏览器（官方以后也不支持） 核心思想：组件(是一个可被反复使用的带有特定功能的视图 Everything is Component) 三、React开发 第一个例子 引入3个js的文件react.js 核心文件react-dom.js 和DOm相关的文件browser.min.js 浏览器 指定了一个容器，用来渲染元素（容器是用来盛放根组件的） ReactDOM.render(要渲染的元素，准备渲染的容器);代码1234ReactDOM.render( &lt;h1&gt;Hello ReactJS&lt;/h1&gt;, document.getElementById('example')) 在js中编写html标签，将这种语法称之为JSX.需要在type中指定babel123babel&lt;script type=\"text/babel\"&gt;&lt;/script&gt; babel是一个js的编译器，能够将es6的语法、或者jsx的语法转换为浏览器能够识别的js语法，从而来实现页面的展示 JSX （java script xml）注意：JSX不是一种新的语言，只不过是允许在js中编写html React是可以完全不使用JSX的，但是用JSX可以更简单的开发，所以还是提倡使用JSX JSX语法 借鉴了XML标签打开与关闭的优点，提高了组件的可读性；JSX中可以直接使用HTML标签，赋予React强大的表现能力，方便进行代码的开发，最早是受php中一个插件库的影响。 基本用法遇到HTML标签(&lt;),就会使用HTML来解析遇到了代码块({),就是使用js来解析注意事项如果我们要渲染多个元素，要将返回的多个元素放到一个顶层标签中 四、组件 在React中 创建组件代码123456//组件类的名称 必须是全驼峰（即使是第一个单词，首字母也要大写）var ComponentName = React.createClass(&#123; render:function()&#123; return ‘要渲染的元素’ &#125; &#125;) 在react中，使用组件1234//是按照html标签的方式 来调用组件&lt;ComponentName&gt;&lt;/ComponentName&gt;&lt;ComponentName/&gt; React有一个特点，根据标签的首字母大小写，来决定是按照组件、html标签的方式 来解析内容 注意事项 首字母必须大写 不允许在render方法返回时，顶层标签或者第一个元素，不允许直接换行 不允许直接返回多个元素，要放在一个顶层标签中组件的工作原理React允许将需要反复使用的视图通过代码块的方式 封装在一个组件中，然后像插入html标签一样，在网页中插入这个组件，将组件类进行实例化，将render方法的返回元素 渲染在指定的容器中 五、React中，是以组件为基本单位复合组件： 并不是一个新的概念，只不过是由其他的组件构成的，本质依然是一个组件 组件树： 在实现一个页面的时候，可以将页面中有共性的部分，封装成组件，把这些组件放在一起，构造成一个最终渲染的根组件，那么这个时候，就有一颗组件树。树的根就是最终渲染的复合组件，树的树叶、树枝就是创建的其它的组件 5.1、props react 父组件与子组件通信的方式 在调用子组件时候，通过属性传值1&lt;son tips=\"something\"/&gt; 在子组件内部，通过props属性接收值1this.props.tips 子组件想与父组件通信的方式 props。父组件 子组件 有数据要传递给父组件 在父组件中 定义一个用来 接收数据的方法 12rcvMsg:function(data)&#123;&#125; 在父组件中调用子组件时，可以将父组件中的方法传递给子组件 1&lt;son callback=&#123;this.rcvMsg&#125;&gt; 子组件在需要给父组件传值时，调用该方法this.props.callback(this.uname) 5.2、children属性this.props.children得到在调用组件时，标签内部 所写的元素，比如:123&lt;MyList&gt; &lt;li&gt;test01&lt;/li&gt;&lt;/MyList&gt; this.props.children 是null 是对象 是数组123456React.Children.map( this.props.children, function(child)&#123; &#125;) 六、refsreference 引用/参考的意思 直接ref 通过ref去找到元素this.refs.myInput","categories":[],"tags":[]},{"title":"Ionic 应用样式API二","slug":"20171122","date":"2017-11-22T13:04:33.000Z","updated":"2017-11-22T13:13:11.520Z","comments":true,"path":"2017/11/22/20171122/","link":"","permalink":"http://yoursite.com/2017/11/22/20171122/","excerpt":"","text":"今天有以下内容 1. ion-refresher 2. ion-infintie-scroll 3. ion-tabs 4. navigation (跳转、传参) 5. form * ion-list * ion-item * ion-label * ion-input * ion-toggle * ion-checkbox * ion-radio * ion-select * ion-toggle * ion-range 6. lifecycle 7. ionScroll 参考文档 [ionic] (https://ionicframework.com/docs/api/) — refresher 下拉刷新 指定一个对应的组件标签 在ion-content的第一个子元素12345678&lt;ion-refresher&gt; &lt;ion-refresher-content pullingText=\"下拉文本\" pullingIcon=\"下拉图标\" refreshingText=\"正在获取数据文本\" refreshingSpinner=\"正在刷新图标\"&gt; &lt;/ion-refresher-content&gt;&lt;/ion-refresher&gt; 指定下拉刷新要执行的操作 123&lt;ion-refresher(ionRefresh)=\"doRefresh()\"&gt;&lt;/ion-refresher&gt; 结束掉刷新动作 第一步：在触发ionRefresh时间的处理函数，指定$event作为参数,doRefresh($event) 第二步：调用complete方法123doRefresh(refresh)&#123; refresher.complete();&#125; 上拉加载更多 调用1234567&lt;ion-infinite-scroll&gt; &lt;ion-infinite-scroll-content loadingText=\"正在加载更多\" loadingSpinner=\"dots\"&gt; &lt;/ion-infinite-scroll-content&gt;&lt;/ion-infinite-scroll&gt; 绑定事件 12&lt;ion-infinite-scroll (ionInfinite)=\"doInfinite($event)\"&gt;&lt;/ion-infinite-scorll&gt; 结束加载更多动作 1234567doInfinite(infinite)&#123; setTimeout(()=&gt;&#123; //在列表的尾部push一条随机数 this.list.push(Math.floor(Math.random()*1000)); infinite.complete();//结束加载动作 &#125;,1000) &#125; — Tabs tabs在ionic中 主要是用来实现底部的导航效果 实现步骤 指定一个容器 1demo14-tabs 创建两个page 12demo15-first-tabdemo16-second-tab 指定tabs，可以点击不同的tab，加载不同的页面 123456&lt;ion-tabs&gt; &lt;ion-tab tabIcon=\"图标\" tabTitle=\"标题\"&gt;&lt;/ion-tab&gt; &lt;ion-tab&gt;&lt;/ion-tab&gt; &lt;ion-tab&gt;&lt;/ion-tab&gt; …&lt;/ion-tabs&gt; — Form ion-list ion-item ion-label ion-input ion-toggle ion-checkbox ion-radio ion-select ion-toggle ion-rangeIonic在实现表单的时候，不需要form本身这个标签，是通过list实现的123456&lt;ion-list&gt; &lt;ion-item&gt; //添加各种标签 &lt;ion-checkbox&gt;/&lt;ion-label&gt;/&lt;ion-radio&gt;/&lt;ion-toggle&gt;/&lt;ion-range&gt;/&lt;ion-input&gt;/&lt;ion-select&gt;/&lt;ion-option&gt;..&lt;/ion-item&gt;&lt;/ion-list&gt; — Navigation ionic中page之间的跳转，是有一个完善的机制，是通过入栈出栈的方式控制前进和后退 如何来进行跳转 js方式去跳转： 12345678* 引入 import &#123;NavController&#125; from 'ionic-angular'* 实例化constructor(public navCtrl:NavController)&#123;&#125;* 跳转： a. import&#123;DestinationPage&#125; from '**' b.this.navCtrl.push(Demo19EndPage); 通过属性跳转 import {DestinantionPage} from ‘路径’ 在组件类中定义一个变量并进行赋值12345 myDestination:any; constructor(public navCtrl: NavController, public navParams: NavParams) &#123; //给自定义变量进行赋值 this.myDestination=Demo19EndPage;&#125; 直接通过属性绑定，将myDestionation绑定给navPush 12345678910111213141516171819202122 [navPush]=\"myDestination\"``` ### 参数传递1. 明确发送、接收方2. 配置接收方的路由地址(可以选)3. 接收参数4. 发送参数**实现方式：**1. 跳转的同时，发送参数 * js传参方式： ``` bashthis.navCtrl.push( DestinationPage,&#123; key:value&#125;) 通过属性方式：1&lt;button [navPush]=\"myDestination\"] [navParams]=\"&#123;key:value&#125;\" &lt;/button&gt; 接收参数 第一步： 12import &#123;NavParams&#125; from 'ionic-angular' constructor(public navParams:NavParams)&#123;&#125; 第二步： 12this.navParams.data.key;简：this.navParams.get(\"key\") — 生命周期 lifeCycle ionViewDidLoad ionViewCanEnter ionViewCanLeave ionViewWillEnter5.ionViewDidEnter ionViewWillLeave ionViewDidLeave ionViewWillUnLoad 用法直接添加函数方法即可 ionScroll滚动区域，允许横向或者纵向滚动123456&lt;ion-scroll style=\"height:200px;white-space:nowrap\" scrollX=\"true\"&gt; &lt;any style=\"display:inline-block\"&gt;&lt;/any&gt;&lt;/ion-scroll&gt;","categories":[],"tags":[]},{"title":"Ionic 应用样式一","slug":"20171121","date":"2017-11-21T14:23:48.000Z","updated":"2017-11-21T15:01:12.427Z","comments":true,"path":"2017/11/21/20171121/","link":"","permalink":"http://yoursite.com/2017/11/21/20171121/","excerpt":"","text":"Ionic样式比较多，先来这几个 AlertController Butto Card FAB Grid List Slides loadingController ModalController AlertController需要三步：123456789101112131415①引入import &#123;AlertController&#125; from 'ionic-angular'②实例化constructor(public myAlertCtrl:AlertController)&#123;&#125;③调用let myWIndow = this.myAlertCtrl.create(&#123; title:\"\", message:'', handler:function()&#123;&#125;, role:'cancel'//只要取消，就会调用方法&#125;);myWIndwow.present(); Button 1&lt;button ion-button color=\"\"&gt;&lt;/button&gt;&lt;!--color=\"primary/danger/secondart/lingt/dark\"--&gt; 1.自定义常用颜色src/theme/variables.scss $colors 进行设置123$colors:( myPink:pink;) 2.ion-button其他常用属性 2.1:只显示边框的按钮 /outline 2.2:只显示文本 /clear 2.3:圆角效果 /round 2.4：图标按钮 123&lt;button ion-button color=\"light\" icon-left&gt; &lt;ion-icon name=\"home\"&gt;&lt;/ion-icon&gt;&lt;/button&gt; 图标官网(http://ionicframework.com/docs/ionicons/index.html) &lt;i&gt;图标颜色可使用color属性自定义颜色，也可以设置style:&quot;color:颜色&quot;&lt;/i&gt; 2.5:图标大小 1234&lt;button ion-button small&gt;small&lt;/button&gt; &lt;button ion-button&gt;默认&lt;/button&gt; &lt;button ion-button large &gt;large&lt;/button&gt; &lt;button ion-button block&gt;block&lt;/button&gt; &lt;img src=&quot;/img/btnsize.png&quot;/&gt; Card用法： 123ion-card ion-card-header ion-card-content 出现的是卡片的样子，类似于名片？？差不多吧，可以将图片放在header中间，content里面写内容 &lt;img src=&quot;/img/card.png&quot;/&gt; FAB 悬浮式按钮123456789101112131415&lt;ion-content padding&gt;&lt;ion-fab side=\"right\"&gt; &lt;button ion-fab icon-noly &gt; &lt;ion-icon name=\"leaf\"&gt;&lt;/ion-icon&gt; &lt;/button&gt; &lt;ion-fab-list &gt; &lt;button ion-fab&gt;&lt;ion-icon name=\"logo-facebook\"&gt;&lt;/ion-icon&gt;&lt;/button&gt; &lt;button ion-fab&gt; &lt;ion-icon name=\"logo-twitter\"&gt;&lt;/ion-icon&gt;&lt;/button&gt; &lt;button ion-fab&gt;&lt;ion-icon name=\"logo-vimeo\"&gt;&lt;/ion-icon&gt;&lt;/button&gt; &lt;button ion-fab&gt;&lt;ion-icon name=\"logo-github\"&gt;&lt;/ion-icon&gt;&lt;/button&gt; &lt;/ion-fab-list&gt;&lt;/ion-fab&gt;&lt;/ion-content&gt;&lt;!--side属性取值:\"left/right/bottom/top/middle\"--&gt; 注意：side属性设置在最外层ion-fab上，控制整体按钮的方向，side属性设置在ion-fab-list上，控制悬浮按钮的方向 Gridgrid的基本用法：指定一个容器为ion-grid行是通过ion-row去指定列是通过ion-col去指定1.可添加多列，类似bootstrap，多列之间不指定列等分，按照均等分实现排列。指定列的等分使用 col- 或col--,指定列宽为整体宽度的x/122.距离左边列的偏移量offset-3.纵向对齐方式align-itens-satrt/center/end -一行的所有列align-self-start/center/end -当前这一列自己4.横向justify-content-start/center/end5.设置距离边界的距离push- 向右移动pull- 向左移动### List3种，分别是图标列表，联系人头像列表，缩略图列表高级用法：滑动列表基本用法 12ion-list ion-item //(ion-item 是支持列表项内部的对齐，可以通过item-start/end进行左右对齐) 分组列表用法 123ion-item-group ion-item-divider //指定分隔符内容 ion-item //具体的内容 图标列表 123ion-list ion-item ion-icon 联系人列表 12ion-list ion-list 效果如分组列表 常见的列表一 —– avatar list 1234ion-list ion-item ion-avatar &lt;img/&gt; 常见的列表一 —– thumbnail list 1234ion-list ion-item ion-thumbnailr &lt;img/&gt; 高级列表一 —– 侧滑动列表(qq联系人滑动效果) 12345678910111213141516171819202122&lt;ion-list&gt; &lt;ion-item-sliding&gt; &lt;ion-item&gt; &lt;ion-icon name=\"star\"&gt;&lt;/ion-icon&gt; &lt;/ion-item&gt; &lt;!--side是指选项按钮显示在item的左边或右边--&gt; &lt;ion-item-options side=\"right\"&gt; &lt;button ion-button color=\"secondary\"&gt;关注&lt;/button&gt; &lt;button ion-button color=\"gander\"&gt;删除&lt;/button&gt; &lt;/ion-item-options&gt; &lt;/ion-item-sliding&gt;&lt;/ion-list&gt;``` ### Slides 做轮播图效果/可做新手教程 &lt;h3&gt;语法&lt;/h3&gt;``` bashion-slides ion-slide ion-slide ion-slides所支持属性：effect : 轮播样式 slide (默认),fade,cube,coverflow or flipspeed 动画时长autoplay 自动轮播，可指定切换时间direction 纵向/横向轮播 默认horizontal 横向，vertical纵向/ loop 循环pager 小圆点paginationType: bullets（默认）,fraction （/）,progress（可视化进度条） LoadingController实现步骤 12345678910111、引入 import &#123;LoadingController&#125; from 'ionic-angular'2、实例化 constructor(public myLoadCtrl:LoadingController)&#123;&#125;3、调用 let myLoading = this.myLoadCtrl.create(&#123; content:'', duration:'' &#125;) myLoading.present(); myLoading.dismiss(); ModalController 自定义模态窗实现步骤 12345678910111213141516171819201.引入import&#123;ModalController&#125; from 'ionic-angular'2.实例化constructor(public myModalCtrl:ModalController)&#123;&#125;3.创建3.1:创建一个组件 在组件中可以关闭一个模态窗呢？ import &#123;ViewController&#125; from 'ionic-angular' constructor(public myViewCtrl:ViewController)&#123;&#125; //myViewCtrl指的就是模态窗 this.myViewCtrl.dismiss()3.2：声明组件 分别在declarations和entryComponents进行声明3.3：引入对应的组件类，比如LoginComponent3.4:创建模态窗let modal=this.myModal.create(LoginComponent); 3.5:显示模态窗 modal.present();","categories":[],"tags":[]},{"title":"关于Ionic的一些东西","slug":"20171120","date":"2017-11-20T10:38:45.000Z","updated":"2017-11-20T14:39:27.429Z","comments":true,"path":"2017/11/20/20171120/","link":"","permalink":"http://yoursite.com/2017/11/20/20171120/","excerpt":"","text":"啊今天学习了Ionic，想记下来手册参考 Ionic 1.搭建开发环境①安装ionic (有可能会用到的cordova)1npm install -g cordova ionic ②创建一个模板项目 1ionic start myApp tabs/sideMenu/blank 创建一个使用tabs模板/侧边栏菜单模板/空白的模板项目 1ionic start myApp sideMenu 创建一个基于侧边栏菜单的模板项目，项目的名称叫做myApp ③进入到开发模式 //进入到当前目录下的myApp文件夹 1cd myApp //启动开发服务器 1ionic serve 2.Ionic启动开发服务器执行流程1ionic serve Ionic中 主要是在src的pages目录 通过创建page来构造app ①Ionic是基于模块的，在app中有main.ts，指定了启动的根模块为AppModule②在AppModule中 ，发现指定的根组件是由ionic-angular所提供的IonicApp③在app.module.ts中IonicModule.forRoot(MyApp)通过IonicApp和myApp就建立起联系了，可以认为IonicApp就是以myApp为根组件④在app.component.ts中 指定了模板内容为app.html在app.html中 将HelloIonicPage设置为当前的root 3.Ionic中page创建、使用的基本步骤①创建一个page1ionic g page demo01 创建一个叫做demo01的页面类，最终会在src的pages目录中生成一个demo01的文件夹，在该文件夹中有对应的类和模板 ②声明1234567import &#123;Demo01Page&#125; from '../pages/demo01/demo01'@NgModule(&#123; delclarations:[Demo01Page], entryComponents:[Demo01Page]&#125;) ③调用选择1：可以选择去通过导航 访问（现在还没有学） 选择2：将Demo01Page ，引入到app.component.ts,设置为rootPage","categories":[],"tags":[{"name":"/","slug":"","permalink":"http://yoursite.com/tags//"}]},{"title":"Hello World","slug":"hello-world","date":"2017-11-19T07:04:44.942Z","updated":"2017-11-19T07:04:44.942Z","comments":true,"path":"2017/11/19/hello-world/","link":"","permalink":"http://yoursite.com/2017/11/19/hello-world/","excerpt":"","text":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new \"My New Post\" More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment","categories":[],"tags":[]}]}